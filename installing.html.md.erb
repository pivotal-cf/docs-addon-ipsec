---
title: Installing the Pivotal Cloud Foundry IPsec Add-On
owner: Security Engineering
---

<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }

    .note.warning:before {
        color: #f99;
     }
</style>

<strong><%= modified_date %></strong>

This topic describes how to prepare your network for IPsec, create an IPsec manifest, and add IPsec to your deployment.
##<a id="prereqs"></a>Prerequisites

To complete the IPsec installation, verify that you have satisfied the following prerequisites before you begin:

* Google Cloud Platform (GCP), vSphere, Azure, Amazon Web Services (AWS), or OpenStack as your IaaS

* Pivotal Cloud Foundry (PCF) operator administration rights

* BOSH deployed through Ops Manager 1.7 or later

* Set the MTU for your IaaS in the Elastic Runtime tile, under **Networking**. Pivotal recommends MTU values of 1354 on GCP, 1438 on Azure, and the default values on AWS and vSphere. For OpenStack, follow the recommendations of your [Neutron/ML2](https://wiki.openstack.org/wiki/Neutron/ML2) plugin provider, or empirically test the correct MTU for your environment.

##<a id="limitations"></a>Limitations

Before installing the IPsec add-on, review the following list of limitations:

* IPsec Release v1.5.x series: During installation, the v1.5.x releases of the IPsec add-on may disrupt connectivity. For minimal downtime in new deployments, Pivotal recommends installing IPsec immediately after Ops Manager, and before installing the Elastic Runtime tile. For existing deployments, there will be downtime when applying IPsec. Upgrade to v1.6.x series to avoid downtime. For a cluster of approximately 40 VMs, you can expect approximately one hour of downtime.

##<a id="bestpractices"></a>Best Practices
  * IPsec may affect the functionality of other service tiles. As a result, Pivotal recommends deploying Elastic Runtime and each service tile to different isolated subnets. Alternatively, you can minimally deploy all service tiles to a single isolated subnet, apart from the Elastic Runtime subnet. Some service tiles, for example RabbitMQ, may not support IPsec, and must be placed in a non-IPsec subnet. 
  * For IPsec, Pivotal recommends any Ubuntu stemcells for vSphere, OpenStack, and HVM stemcells for AWS. These stemcells are available on <a href="https://network.pivotal.io/products/stemcells">Pivotal Network</a>. If you use PV stemcells obtained from <a href="https://bosh.io">bosh.io</a>, see the <a href="./troubleshooting.html#ipsec-installation-issues">Packet Loss</a> section of the _Troubleshooting the PCF IPsec Add-On_ topic to adjust MTU values.

##<a id="config-network"></a>Configure Network Security
Refer to the appropriate section below for your IaaS network configuration details.

###<a id="gcp"></a>Google Cloud Platform

To configure your Google Cloud Platform (GCP) environment for IPsec, perform the following steps:

1. Navigate to the **Networking** section of the GCP Console. 
1. Click **Firewall rules**.
1. Click **Create Firewall Rule**.
1. For **Name**, enter `ipsec`.
1. For **Network**, select the network where Ops Manager is deployed. For example, **opsmgr**.
1. For **Source filter**, select **Allow from any source (0.0.0.0/0)**.
1. For **Allowed protocols and ports**, enter `udp:500; ah; esp`.
1. Click **Create**. 
1. Adjust the MTU value to `1354` by performing the procedure in the <a href="./troubleshooting.html#ipsec-installation-issues">Packet Loss</a> section of the _Troubleshooting the PCF IPsec Add-On_ topic.


###<a id="vsphere"></a>vSphere

Confirm that your network allows the protocols listed in the table below.

<table>
  <tr>
    <th width="33%">Protocol Name</th>
    <th width="33%">Protocol Number</th>
    <th width="33%">Port(s)</th>
  </tr>
  <tr>
    <td>AH</td>
    <td>51</td>
    <td>Any</td>
  </tr>
  <tr>
    <td>ESP</td>
    <td>50</td>
    <td>Any</td>
  </tr>
  <tr>
    <td>UDP</td>
    <td>17</td>
    <td>500</td>
  </tr>
</table>


###<a id="azure"></a>Azure

1. Confirm that your network allows the protocols listed in the table below.
  <table>
    <tr>
      <th width="33%">Protocol Name</th>
      <th width="33%">Protocol Number</th>
      <th width="33%">Port(s)</th>
    </tr>
    <tr>
      <td>AH</td>
      <td>51</td>
      <td>Any</td>
    </tr>
    <tr>
      <td>ESP</td>
      <td>50</td>
      <td>Any</td>
    </tr>
    <tr>
      <td>UDP</td>
      <td>17</td>
      <td>500</td>
    </tr>
  </table>

1. Adjust the MTU value to `1438` by performing the procedure in the <a href="./troubleshooting.html#ipsec-installation-issues">Packet Loss</a> section of the _Troubleshooting the PCF IPsec Add-On_ topic.

###<a id="aws"></a>AWS

To configure your AWS environment for IPsec, perform the following steps:

1. Navigate to **EC2 Dashboard > Security Groups**.

2. Select the Security Group with the description **PCF VMs Security Group** and click **Edit**.

3. Create the following **Inbound Rules**.
  <table border="1" class="nice">
  <tr>
    <th>Type</th>
    <th>Protocol Name</th>
    <th>Protocol Number</th>
    <th>Port Range</th>
    <th>Source</th>
  </tr>
  <tr>
    <td>Custom Protocol</td>
    <td>AH</td>
    <td>51</td>
    <td>All</td>
    <td>10.0.0.0/16</td>
  </tr>
  <tr>
    <td>Custom Protocol</td>
    <td>ESP</td>
    <td>50</td>
    <td>All</td>
    <td>10.0.0.0/16</td>
  </tr>
  <tr>
    <td>Custom UDP Rule</td>
    <td>UDP</td>
    <td>17</td>
    <td>500</td>
    <td>10.0.0.0/16</td>
  </tr>
  </table>

<p class="note"><strong>Note</strong>: The default <strong>PCF VMs Security Group</strong> is typically specified with a subnet of <code>10.0.0.0/16</code>. If your PCF subnet is deployed to a different CIDR block, adjust the source as needed.</p>

###<a id="openstack"></a>OpenStack

<p class="note"><strong>Note</strong>: The following network configuration is optimized for Mirantis OpenStack, but other OpenStack distributions have a similar workflow.</p>

To configure your Mirantis OpenStack environment for IPsec, perform the following steps:

1. Navigate to **Project / Access & Security**.

1. Select the security group and click **Manage Rules**.

1. Create the following **Ingress and Egress Rules**. Adjust the source CIDR as needed for your environment.
  <table border="1" class="nice">
  <tr>
    <th>Protocol Name</th>
    <th>Protocol Number</th>
    <th>Port Range</th>
    <th>Source</th>
  </tr>
  <tr>
    <td>ESP</td>
    <td>50</td>
    <td>Any</td>
    <td>0.0.0.0/0</td>
  </tr>
  <tr>
    <td>AH</td>
    <td>51</td>
    <td>Any</td>
    <td>0.0.0.0/0</td>
  </tr>
  <tr>
    <td>UDP</td>
    <td>17</td>
    <td>500</td>
    <td>0.0.0.0/0</td>
  </tr>
  </table>

##<a id="create-mfest"></a>Create the IPsec Manifest

Follow these steps to create the IPsec manifest for your deployment:

1. Create an IPsec manifest file `ipsec-addon.yml`, starting with the code below as a template.

  <strong>For Linux:</strong>
  <pre>releases:
  \- {name: ipsec, <strong>version</strong>: 1.0.0}<br>
  addons:
  \- name: ipsec-addon
      jobs:
      \- <strong>name</strong>: ipsec
        release: ipsec
      include:
        stemcell:
        - <strong>os</strong>: ubuntu-trusty
      properties:
        ipsec:
          <strong>optional</strong>: false|true  # Available since <strong>v1.6.x</strong>
          <strong>ipsec\_subnets</strong>:
          \- 10.0.1.1/20
          <strong>no\_ipsec\_subnets</strong>:
          \- 10.0.1.10/32  # bosh director
          \- 10.0.1.4/32 # ops manager
          <strong>instance\_certificate</strong>: |
            -----BEGIN CERTIFICATE-----
            MIIEMDCCAhigAwIBAgIRAIvrBY2TttU/LeRhO+V1t0YwDQYJKoZIhvcNAQELBQAw
            ...
            -----END CERTIFICATE-----
          <strong>instance\_private\_key</strong>: |
            -----BEGIN RSA PRIVATE KEY-----
            EXAMPLExRSAxPRIVATExKEYxDATAxEXAMPLExRSAxPRIVATExKEYxDATA
            ...
            -----END RSA PRIVATE KEY-----
          <strong>ca\_certificates</strong>:
            \- |
              -----BEGIN CERTIFICATE-----
              MIIFCTCCAvGgAwIBAgIBATANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDEwl0ZXN0
              ...
              -----END CERTIFICATE-----
            \- |
              -----BEGIN CERTIFICATE-----
              MIIFCTCCAvGgAwIBAgIBATAAYDVQQDEwl0ZXN0NBgkqhkiG9w0BAQsFADAUMRIwE
              ...
              -----END CERTIFICATE-----
          <strong>prestart\_timeout</strong>: 30
          <strong>esp\_proposals</strong>: aes128gcm16!  # Available since <strong>v1.6.x</strong>
          <strong>ike\_proposals</strong>: aes128-sha256-modp2048!  # Available since <strong>v1.6.x</strong>
  </pre>

  <strong>For Windows:</strong>
  <pre>releases:
  \- {name: ipsec, <strong>version</strong>: 1.0.0}<br>
  addons:
  \- name: ipsec-windows-addon
      jobs:
      \- <strong>name</strong>: ipsec-win
        release: ipsec
      include:
        \- stemcell:
          \- <strong>os</strong>: windows2012R2
      properties:
        ipsec:
          <strong>optional</strong>: false|true
          <strong>ipsec\_subnets</strong>:
          \- 10.0.1.1/20
          <strong>no\_ipsec\_subnets</strong>:
          \- 10.0.1.10/32  # bosh director
          \- 10.0.1.4/32 # ops manager
          <strong>instance\_pfx</strong>: |
            MIIEMDCCAhigAwIBAgIRAIvrBY2TttU/LeRhO+V1t0YwDQYJKoZIhvcNAQELBQAw
            ...
          <strong>ca\_certificates</strong>:
            \- |
              -----BEGIN CERTIFICATE-----
              MIIFCTCCAvGgAwIBAgIBATANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDEwl0ZXN0
              ...
              -----END CERTIFICATE-----
            \- |
              -----BEGIN CERTIFICATE-----
              MIIFCTCCAvGgAwIBAgIBATAAYDVQQDEwl0ZXN0NBgkqhkiG9w0BAQsFADAUMRIwE
              ...
              -----END CERTIFICATE-----
          <strong>quick\_mode\_proposals</strong>:
            \- encryption: AESGCM128
              hash: AESGMAC128
          <strong>main\_mode\_proposals</strong>:
            \- encryption: AES128
              hash: SHA256
              keyexchange: DH14

  </pre>

2. Replace the values listed in the template as follows:
 * <strong>Linux:</strong>
     * For v1.5.x and above:
         * <code>releases: - version</code>: Specify the version number of your IPsec download from Pivotal Network.
         * <code>jobs: - name</code>: Do not change the name of this job. It must be `ipsec`.
         * <code>include: stemcell - os</code>: IPsec v1.5.x is only supported on `ubuntu-trusty`.
         * <code>ipsec\_subnets</code>: <a name="ipsec_subnets"></a> list the subnets that you want to be encrypted. you can include the entire deployment or a portion of the network. encrypt any network that handles business-sensitive data.
         * <code>no\_ipsec\_subnets</code>: <a name="no_ipsec_subnets"></a> list the ip address of your bosh director and ops manager vm, along with any other ip addresses in your pcf deployment that you want to communicate without encryption. pivotal recommends that you list the subnets that are used for pcf managed services. subnets for pcf managed services that do not support ipsec must be listed under `no-ipsec`.
          <p class="note"><strong>Note</strong>: In GCP, if you use the default router for DNS instead of the Google public DNS at <code>8.8.8.8</code>, you must add the IP address of the default router in your subnet to <code>no\_ipsec\_subnets</code>. For example, <code>10.0.0.1/32</code>.</p>
         * <code>instance\_certificate</code>: <a name="instance_certificate"></a> Copy in the signed certificate that will be used by all your instance VMs. You must use one of the CAs in the ca\_certificates property to sign this certificate. For a development or test environment, you can use a self-signed certificate. See the [Generate a Self-Signed Certificate](#self-signed) section of this topic for more information.
         * <code>instance\_private\_key</code>: <a name="instance_private_key"></a> Copy in the private key that corresponds to the instance\_certificate above. This key must not use a pass phrase.
         * <code>ca\_certificates</code>: <a name="ca_certificates"></a> Copy in CA certificates for the instance VM to trust during the validation process. In most cases, you only need the CA certificate used to sign the instance certificate. During CA credential rotation, you need two CA certificates.
         * <code>prestart\_timeout</code>: You can modify the 30 second default prestart timeout value. This value limits the number of seconds allowed for IPsec to start before failing the attempt.
     * For <strong>v1.6.x</strong> and above:
         * <code>optional</code>: <a name="optional"></a> Makes IPsec enforcement optional. To add IPsec, set this flag to `true`. Once IPsec has been successfully installed, set this flag back to `false` and redeploy.
         * <code>esp\_proposals</code>: <a name="esp_proposals"></a> You can modify the ESP (Quick Mode) encryption and integrity algorithms.
          The default, `aes128gcm16!`, is 128 bit AES-GCM with 128 bit ICV for both encryption and integrity.
         * <code>ike\_proposals</code>: <a name="ike_proposals"></a> You can modify the IKE (Main Mode) encryption and integrity algorithms, and the Diffie-Hellman group.
         The default, `aes128-sha256-modp2048!`, is 128 bit AES-CBC for encryption, SHA2\_256\_128 HMAC for integrity, and Group 14 for Diffie-Hellman.

 * <strong>Windows:</strong>
     * For <strong>v1.7.x</strong> and above:
         * <code>jobs: - name</code>: It must be `ipsec-win` for windows.
         * <code>include: stemcell - os</code>: IPsec is supported on `windows2012R2` stemcells.
         * <code>ipsec\_subnets</code>: Same as [ipsec\_subnets](#ipsec_subnets) for Linux
         * <code>no\_ipsec\_subnets</code>: Same as [no\_ipsec\_subnets](#no_ipsec_subnets) for Linux
         * <code>instance\_pfx</code>: This is the signed [instance\_certificate](#instance_certificate) and corresponding [instance\_private_key](#instance_private_key) that will be used by all instance VMs in PFX format (Base64 encoded). The certificate should be signed by one of the CAs in the ca_certificates property.
         For a development or test environment, you can use a self-signed certificate. See the [Generate a Self-Signed Certificate](#self-signed) section of this topic for more information.
         * <code>ca\_certificates</code>: Same as [ca\_certificates](#ca_certificates) for Linux
         * <code>optional</code>: Same as [optional](#optional) for Linux
         * <code>quick\_mode\_proposals</code>: Array of Quick Mode algorithms for encryption and integrity. Should match list specified in [esp_proposals](#esp_proposals) for Linux.
           The default:
           <pre>
           \- encryption: AESGCM128
              hash: AESGMAC128
           </pre>
         * <code>main\_mode\_proposals</code>: Array of Main Mode algorithms for encryption, integrity and key exchange. Should match list specified in [ike_proposals](#ike_proposals) for Linux.
           The default:
           <pre>
           \- encryption: AES128
              hash: SHA256
              keyexchange: DH14
           </pre>
<p class="note"><strong>Note</strong>: To modify the configuration in an existing deployment, you must update the manifest file and redeploy.</p>

##<a id="download-deploy"></a>Download and Deploy the IPsec Add-On

<p class="note warning"><strong>Warning</strong>: Adding the IPsec add-on version <strong>v1.5.x</strong> to an existing deployment results in app downtime. Deploy series <strong>v1.6.x</strong> and later to minimize downtime.</p>

After deploying Ops Manager, perform the following steps to download and deploy the IPsec add-on:

1. Download the IPsec add-on software binary from the [Pivotal Network](https://network.pivotal.io/products/p-ipsec-addon) to your local machine.

2. Copy the software binary to your Ops Manager instance. 
<pre class="terminal">$ scp -i PATH/TO/PRIVATE/KEY ipsec-release.tar.gz ubuntu@YOUR-OPS-MANAGER-VM-IP:</pre>

3. Copy the IPsec manifest file to your Ops Manager instance.
<pre class="terminal">$ scp -i PATH/TO/PRIVATE/KEY ipsec-addon.yml ubuntu@YOUR-OPS-MANAGER-VM-IP:</pre>

4. SSH into Ops Manager.
 <pre class="terminal">$ ssh -i PATH-TO-PRIVATE-KEY ubuntu@YOUR-OPS-MANAGER-VM-IP</pre>

5. On the Ops Manager VM, navigate to the software binary location in your working directory.
<pre class="terminal">
$ cd PATH-TO-BINARY</pre>

6. On the Ops Manager VM, target the internal IP address of your BOSH Director. When prompted, enter your BOSH Director credentials. To retrieve your BOSH Director credentials, navigate to Ops Manager, click the **Credentials** tab, and click **Link to Credential** next to **Director Credentials**. 
<pre class="terminal">
$ bosh --ca-cert /var/tempest/workspaces/default/root\_ca\_certificate target YOUR-BOSH-DIRECTOR-INTERNAL-IP
Target set to 'p-bosh'
Your username: director
Enter password: ******************
Logged in as 'director'
</pre>

7. Upload your release.
<pre class="terminal">$ bosh upload release PATH-TO-BINARY/BINARY-NAME.tar</pre>

8. Optionally, from the command line, confirm that the upload of the IPsec software binary completed. You should see the IPsec binary file.
<pre class="terminal">$ bosh releases</pre>

9. Update your runtime configuration to include the IPsec add-on.
<pre class="terminal">$ bosh update runtime-config PATH/ipsec-addon.yml</pre>

10. Verify your runtime configuration changes match what you specified in the IPsec manifest file.

    <pre class="terminal">
    $ bosh runtime-config
    Acting as user 'admin' on 'micro'

    releases:
     <span>-</span> {name: ipsec, version: 1.0.0}

    addons:
     name: ipsec-addon
      jobs:
      <span>-</span> name: ipsec # ipsec-win for windows
        release: ipsec
    ...
    </pre>

11. If you have already deployed Elastic Runtime and are adding IPsec to an existing deployment, complete the following steps.
     * For <strong>v1.5.x</strong>: Scale down the number of Consul instances to `1`. See the [Scaling Elastic Runtime](http://docs.pivotal.io/pivotalcf/opsguide/scaling-ert-components.html) topic for more information.
     * For <strong>v1.6.x</strong> and above: Set the `optional` flag to `true`. You do not need to scale the number of Consul instances.

12. Navigate to your **Installation Dashboard** in Ops Manager.

<p class="note"><strong>Note</strong>: For v1.5.x, you cannot revert the following step without downtime. To minimize the impact, we recommend upgrading to the v1.6.x series before removing IPsec from the deployment.</p>

13. Click **Apply Changes**
     * For <strong>v1.6.x</strong> and above:
      * Wait for the installation to complete.
      * Set the `optional` flag to `false`.
      * Update the runtime config. <pre class="terminal">$ bosh update runtime-config PATH/ipsec-addon.yml</pre>
      * Navigate to your **Installation Dashboard**.
      * Click **Apply Changes**.

14. Secure the sensitive information in the `ipsec-addon.yml` file. Pivotal recommends encrypting the file and moving it to a secure location.

15. For <strong>v1.5.x</strong>: If you scaled down the number of Consul instances in your existing Elastic Runtime deployment, scale the number of instances back to the previous value.

16. If you have not installed the Elastic Runtime tile, deploy Elastic Runtime by following the installation instructions for your IaaS. See the [Installing Pivotal Cloud Foundry](http://docs.pivotal.io/pivotalcf/installing/index.html) topic for more information.

##<a id="verify"></a>Verify Your IPsec Installation

After installing IPsec and deploying Elastic Runtime, perform the following steps to verify your IPsec installation:

1. Run `bosh vms` to list the job VMs in your deployment. Choose the job name and index of any VM. The exact VM does not matter, because installing the IPsec add-on loads IPsec on all VMs deployed by Ops Manager.

1. Run `bosh ssh JOB-NAME/INDEX` to open an SSH connection into the VM.

1. Run `sudo su -` to enter the root environment with root privileges.

1. Run `monit summary` to confirm that your `ipsec` job is listed as a `bosh` job.
<pre class="terminal">
The Monit daemon 5.2.5 uptime: 18h 32m
...
Process 'ipsec'                     running
System 'system\_localhost'           running
</pre>

2. Run `PATH-TO-IPSEC/ipsec statusall` to confirm that IPsec is running. If IPsec is not running, this command produces no output.
<pre class="terminal">
$ /var/vcap/packages/strongswan-5.3.5/sbin/ipsec statusall
Status of IKE charon daemon (strongSwan 5.3.5, Linux 3.19.0-56-generic, x86\_64):
  uptime: 18 hours, since Mar 16 23:58:50 2016
  malloc: sbrk 2314240, mmap 0, used 1182400, free 1131840
  worker threads: 11 of 16 idle, 5/0/0/0 working, job queue: 0/0/0/0, scheduled: 206
  loaded plugins: charon aes sha1 sha2 random nonce x509 revocation constraints pubkey pkcs1 pkcs7 pkcs8 pkcs12 pem gmp xcbc cmac hmac attr kernel-netlink socket-default stroke
Listening IP addresses:
  10.10.5.66
Connections:
ipsec-10.10.4.0/24:  %any...%any  IKEv1/2
ipsec-10.10.4.0/24:   local:  [CN=test-cert-1-ca-1] uses public key authentication
ipsec-10.10.4.0/24:    cert:  "CN=test-cert-1-ca-1"
ipsec-10.10.4.0/24:   remote: uses public key authentication
ipsec-10.10.9.0/24:   child:  10.10.5.66/32 === 10.10.9.0/24 TRANSPORT
no-ipsec-10.10.4.1/32:  %any...%any  IKEv1/2
no-ipsec-10.10.4.1/32:   local:  uses public key authentication
no-ipsec-10.10.4.1/32:   remote: uses public key authentication
no-ipsec-10.10.4.1/32:   child:  dynamic === 10.10.4.1/32 PASS
Shunted Connections:
no-ipsec-10.10.4.1/32:  dynamic === 10.10.4.1/32 PASS
no-ipsec-10.10.5.1/32:  dynamic === 10.10.5.1/32 PASS
no-ipsec-10.10.6.1/32:  dynamic === 10.10.6.1/32 PASS
Routed Connections:
ipsec-10.10.9.0/24{6}:  ROUTED, TRANSPORT, reqid 6
ipsec-10.10.9.0/24{6}:   10.10.5.66/32 === 10.10.9.0/24
ipsec-10.10.8.0/24{5}:  ROUTED, TRANSPORT, reqid 5
ipsec-10.10.4.0/24{1}:   10.10.5.66/32 === 10.10.4.0/24
Security Associations (45 up, 0 connecting):
ipsec-10.10.4.0/24[459]: ESTABLISHED 13 seconds ago, 10.10.5.66[CN=test-cert-1-ca-1]...10.10.4.38[CN=test-cert-1-ca-1]
ipsec-10.10.4.0/24{1527}:   10.10.5.66/32 === 10.10.4.38/32
...
</pre>

##<a name="self-signed"></a>Generate a Self-Signed Certificate

<p class="note"><strong>Note</strong>: Use a self-signed certificate only for development or test environments. We recommend against using self-signed certificates for production deployments. The script below generate private keys in a <code>certs</code> subdirectory.</p>

Follow the instructions to generate a self-signed certificate for your IPsec manifest.

### Generate a Self-Signed Certificate with OpenSSL

1. [Download](./scripts/openssl-create-ipsec-certs.sh) the `openssl-create-ipsec-certs.sh` bash script.
1. Navigate to the directory where you downloaded the script:
  <pre class="terminal">$ cd ~/workspace</pre>
1. Change the permissions of the script:
  <pre class="terminal">$ chmod u+x openssl-create-ipsec-certs.sh</pre>
1. Run the script:
  <pre class="terminal">$ ./openssl-create-ipsec-certs.sh</pre>

